{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Paginacion.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","_this","current","value","props","datosBusqueda","react_default","a","createElement","onSubmit","this","className","ref","type","placeholder","Component","Imagen","_props$imagen","imagen","largeImageURL","views","likes","previewURL","tags","src","alt","href","target","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenes","length","Fragment","map","components_Imagen","key","id","components_Paginacion","App","state","pagina","scroll","document","querySelector","scrollIntoView","consultarApi","url","concat","fetch","then","respuesta","json","resultado","setState","hits","Buscador_Buscador","Resultado_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b3a2aa1.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nexport default class Buscador extends Component {\n\n    busquedaRef = React.createRef();\n    \n    obtenerDatos = e => {\n        e.preventDefault();\n        // VALOR DEL INPUT\n        const termino = this.busquedaRef.current.value\n        // SE MANDA EL VALOR AL PADRE \n        this.props.datosBusqueda(termino)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.obtenerDatos}>\n                <div className=\"row\">\n                    <div className=\"form-group col-md-8\">\n                        <input \n                            ref={this.busquedaRef}\n                            type=\"text\" \n                            className=\"form-control form-control-lg\" \n                            placeholder=\"Busca tu imagen:\" />\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                        <input \n                            type=\"submit\" \n                            className=\"btn btn-lg btn-danger btn-block\" \n                            value=\"Buscar\" />\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n","import React from 'react'\n\n\nconst Imagen = (props) => { \n\n    const { largeImageURL, views, likes, previewURL, tags } = props.imagen;\n\n    return (\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img \n                    className=\"card-img-top\"\n                    src={previewURL}\n                    alt={tags}\n                />\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{likes} Me gusta</p>\n                    <p className=\"card-text\">{views} Vistas</p>\n                    <a href={largeImageURL} \n                        target=\"blank\"\n                        className=\"btn btn-primary btn-block\"\n                    >Ver Imagen</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Imagen","import React from 'react'\n\n\nconst Paginacion = props => (\n    <div className=\"py-3\">\n        <button type=\"button\" className=\"btn btn-info mr-1\" onClick={props.paginaAnterior} >&larr; Anterior</button>\n        <button type=\"button\" className=\"btn btn-info\" onClick={props.paginaSiguiente}>Siguiente &rarr;</button>\n    </div>\n)\n\nexport default Paginacion","import React, { Component } from 'react'\n\n// COMPONENTES\nimport Imagen from './Imagen'\nimport Paginacion from './Paginacion'\n\nexport default class Resultado extends Component {\n\n    mostrarImagenes = () => {\n        const imagenes = this.props.imagenes;\n        if ( imagenes.length === 0) return null; \n            return (\n                <React.Fragment>\n                    <div className=\"col-12 p-5 row\">\n                        {imagenes.map( imagen => (\n                            <Imagen \n                                key={imagen.id}\n                                imagen={imagen}\n                            />\n                        ))}\n                    </div>\n                    <Paginacion \n                        paginaAnterior={this.props.paginaAnterior}\n                        paginaSiguiente={this.props.paginaSiguiente}\n                    />\n                </React.Fragment>\n            )\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.mostrarImagenes()}\n            </React.Fragment>\n        )\n    }\n}\n","//FUNCIONALES\nimport React, { Component } from 'react'\n\n//COMPONENTES\nimport Buscador from './components/Buscador'\nimport Resultado from './components/Resultado'\n\n\nexport default class App extends Component {\n  state = {\n    termino: '',\n    imagenes: [],\n    pagina: ''\n  }\n\n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'start');\n  }\n\n  consultarApi = () => {\n    const url = `https://pixabay.com/api/?key=11751353-09eb9c33121cfa4d6c662ec50&q=${this.state.termino}&per_page=30&page=${this.state.pagina}`;\n\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado => this.setState({ imagenes: resultado.hits }))  \n  }\n\n  paginaAnterior = () => {\n    let pagina = this.state.pagina\n    if ( pagina === 1) return null\n      pagina -= 1;\n\n      this.setState({\n        pagina\n      },() => {\n        this.consultarApi()\n        this.scroll()\n      }) \n  }\n\n  paginaSiguiente = () => {\n    let pagina = this.state.pagina\n    pagina += 1;\n\n    this.setState({\n      pagina\n    },() => {\n      this.consultarApi()\n      this.scroll()\n    }) \n  }\n\n  datosBusqueda = termino => {\n    this.setState({\n      termino: termino,\n      pagina: 1\n    }, () => {\n      this.consultarApi()\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app container mt-3\">\n        <div className=\"jumbotron\">\n        <h1 className=\"text-center\">ReactPixabayApi</h1>\n            <h1 className=\"lead text-center\">Buscador de im√°genes</h1>\n            <Buscador\n              datosBusqueda={this.datosBusqueda}  \n            />\n        </div>\n          <div className=\"row justify-content-center\">\n              <Resultado \n                imagenes={this.state.imagenes} \n                paginaAnterior={this.paginaAnterior}\n                paginaSiguiente={this.paginaSiguiente}\n              />\n          </div>    \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}